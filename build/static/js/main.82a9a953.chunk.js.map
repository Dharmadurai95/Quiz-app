{"version":3,"sources":["component/question-cart.ts","component/QuestionCart.tsx","style.ts","component/api.ts","component/utility.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Wrapper","styled","div","ButtonWrapper","correct","userClick","QuestionCart","question","answer","callback","useranswer","questionNr","totalQuestion","console","log","className","dangerouslySetInnerHTML","__html","map","ans","key","correctAnswer","disabled","onClick","e","value","Difficulty","fetchQuizQuestions","amound","difficulty","a","endPoint","fetch","json","data","results","answers","array","correct_answer","incorrect_answers","sort","Math","random","App","useState","loading","setloading","setquestion","number","setnumber","userAnswer","setuserAnswer","score","setscore","gameOver","setgameOver","getQuestion","EASY","newQuestion","length","currentTarget","prev","AnswerObject","undefined","TOTAL_QUESTION","nextQuestion","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.82a9a953.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  max-width: 1100px;\r\n  background-color: #ebfeff;\r\n  border-radius: 10px;\r\n  border: 20px;\r\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n  text-align: center;\r\n\r\n  > p {\r\n    font-size: 1rem;\r\n  }\r\n`;\r\ntype ButtonWrapperProps = {\r\n  correct: boolean;\r\n  userClick: boolean;\r\n};\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n  transition: all 0.3 ease;\r\n\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n  button {\r\n    cursor: pointer;\r\n    user-select: none;\r\n    font-size: 0.8rem;\r\n    width: 100%;\r\n    height: 40px;\r\n    margin: 5px 0;\r\n    background: ${({ correct, userClick }) =>\r\n      correct\r\n        ? \"linear-gradient(90deg,#56ffa4,#59bc86)\"\r\n        : !correct && userClick\r\n        ? \"linear-gradient(90deg,#ff5656,#c16868)\"\r\n        : \"linear-gradient(90deg,#56ccff,#6eafb4)\"};\r\n    border: 3px solid #fff;\r\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n    border-radius: 10px;\r\n    color: #fff;\r\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { AnswerObject } from \"../App\";\r\nimport { Wrapper, ButtonWrapper } from \"./question-cart\";\r\ninterface Props {\r\n  question: string;\r\n  answer: string[];\r\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n  useranswer: AnswerObject | undefined;\r\n  questionNr: number;\r\n  totalQuestion: number;\r\n}\r\n\r\nconst QuestionCart = ({\r\n  question,\r\n  answer,\r\n  callback,\r\n  useranswer,\r\n  questionNr,\r\n  totalQuestion,\r\n}: Props) => {\r\n  console.log(\r\n    question,\r\n    answer,\r\n    callback,\r\n    useranswer,\r\n    questionNr,\r\n    totalQuestion,\r\n    \"from question card\"\r\n  );\r\n  return (\r\n    <>\r\n      <Wrapper>\r\n        <p className=\"number\">Queston:{questionNr + \"/\" + totalQuestion}</p>\r\n        <p\r\n          className=\"qustion\"\r\n          dangerouslySetInnerHTML={{ __html: question }}\r\n        ></p>\r\n        <div>\r\n          {answer.map((ans) => (\r\n            <ButtonWrapper\r\n              key={ans}\r\n              correct={useranswer?.correctAnswer === ans}\r\n              userClick={useranswer?.answer === ans}\r\n            >\r\n              <button\r\n                disabled={useranswer ? true : false}\r\n                onClick={(e) => callback(e)}\r\n                value={ans}\r\n              >\r\n                <span dangerouslySetInnerHTML={{ __html: ans }}></span>\r\n              </button>\r\n            </ButtonWrapper>\r\n          ))}\r\n        </div>\r\n      </Wrapper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default QuestionCart;\r\n","import styled, { createGlobalStyle } from \"styled-components\";\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  > p {\n    color: #fff;\n  }\n  .score {\n    color: #fff;\n    font-size: 2rem;\n    margin: 0;\n  }\n  h1 {\n    font-family: Fascinate Inline, Haettenschweiler, \"Arial Narrow Bold\",\n      sans-serif;\n    background-image: linear-gradient(180deg, #fff, #87f1ff);\n    background-size: 100%;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    filter: drop-shadow(2px 2px #0085a3);\n    font-size: 70px;\n    text-align: center;\n    font-weight: 400;\n  }\n  .start,\n  .next {\n    cursor: pointer;\n    background: linear-gradient(180deg, ##fff, #ffcc91);\n    border: 2px solid #d38558;\n    box-shadow: 0px 5px 10px rgpa(0, 0, 0, 0.25);\n    border-radius: 10px;\n    height: 40px;\n    margin: 20px 0;\n    padding: 0 40px;\n  }\n  .start {\n    max-width: 200px;\n  }\n`;\n","import { shffleArr } from \"./utility\";\r\nexport enum Difficulty {\r\n  EASY = \"easy\",\r\n  MEDIUM = \"medium\",\r\n  HARD = \"hard\",\r\n}\r\n\r\nexport type Question = {\r\n  category: string;\r\n  correct_answer: string;\r\n  difficulty: string;\r\n  incorrect_answers: string[];\r\n  question: string;\r\n  type: string;\r\n};\r\n\r\nexport type QuestionState = Question & { answers: string[] };\r\nexport const fetchQuizQuestions = async (\r\n  amound: number,\r\n  difficulty: Difficulty\r\n) => {\r\n  const endPoint = `https://opentdb.com/api.php?amount=${amound}&difficulty=${difficulty}&type=multiple`;\r\n  const data = await (await fetch(endPoint)).json();\r\n  return data.results.map((question: Question) => ({\r\n    ...question,\r\n    answers: shffleArr([\r\n      question.correct_answer,\r\n      ...question.incorrect_answers,\r\n    ]),\r\n  }));\r\n};\r\n","export const shffleArr = (array: any) =>\r\n  [...array].sort(() => Math.random() - 0.5);\r\n","import React, { useState } from \"react\";\nimport QuestionCart from \"./component/QuestionCart\";\nimport { Wrapper } from \"./style\";\nimport { fetchQuizQuestions, Difficulty, QuestionState } from \"./component/api\";\nimport \"./app.css\";\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n};\nconst TOTAL_QUESTION = 10;\n\nconst App = () => {\n  const [loading, setloading] = useState(false);\n  const [question, setquestion] = useState<QuestionState[]>([]);\n  const [number, setnumber] = useState(0);\n  const [userAnswer, setuserAnswer] = useState<AnswerObject[]>([]);\n  const [score, setscore] = useState(0);\n  const [gameOver, setgameOver] = useState(true);\n\n  console.log(question);\n  //get questions\n\n  const getQuestion = async () => {\n    setloading(true);\n    setgameOver(false);\n    const newQuestion = await fetchQuizQuestions(\n      TOTAL_QUESTION,\n      Difficulty.EASY\n    );\n    setquestion(newQuestion);\n    setscore(0);\n    setuserAnswer([]);\n    setnumber(0);\n    setloading(false);\n  };\n  //check answer button\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    //user answer\n    const answer = e.currentTarget.value;\n    // check correct answer or not\n    const correct = question[number].correct_answer === answer;\n    if (correct) setscore((prev) => prev + 1);\n    const AnswerObject = {\n      question: question[number].question,\n      answer,\n      correct,\n      correctAnswer: question[number].correct_answer,\n    };\n\n    setuserAnswer((prev) => [...prev, AnswerObject]);\n  };\n\n  //next question\n  const nextQuestion = () => {\n    const nextQuestion = number + 1;\n    if (nextQuestion === TOTAL_QUESTION) {\n      setgameOver(true);\n    } else {\n      setnumber(nextQuestion);\n    }\n  };\n  return (\n    <div className=\"wrapper\">\n      <div className=\"container\">\n        <Wrapper>\n          <h1>React Quiz</h1>\n          {gameOver || userAnswer.length === TOTAL_QUESTION ? (\n            <button className=\"start\" onClick={getQuestion}>\n              Start\n            </button>\n          ) : null}\n\n          {loading ? <p>Question Loading ....</p> : null}\n          {!gameOver && <p className=\"score\">Score:{score}</p>}\n\n          {!gameOver && !loading && (\n            <QuestionCart\n              questionNr={number + 1}\n              totalQuestion={TOTAL_QUESTION}\n              answer={question[number].answers}\n              question={question[number].question}\n              callback={checkAnswer}\n              useranswer={userAnswer ? userAnswer[number] : undefined}\n            />\n          )}\n          {!gameOver &&\n          !loading &&\n          userAnswer.length === number + 1 &&\n          number !== TOTAL_QUESTION - 1 ? (\n            <button className=\"next\" onClick={nextQuestion}>\n              next Question\n            </button>\n          ) : null}\n        </Wrapper>\n      </div>\n    </div>\n  );\n};\nexport default App;\n\n// https://opentdb.com/api.php?amount=10&category=9&type=multiple;\n\n// https://opentdb.com/api.php?amount=10&type=multiple\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}